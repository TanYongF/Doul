// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dyUserFieldNames          = builder.RawFieldNames(&DyUser{})
	dyUserRows                = strings.Join(dyUserFieldNames, ",")
	dyUserRowsExpectAutoSet   = strings.Join(stringx.Remove(dyUserFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dyUserRowsWithPlaceHolder = strings.Join(stringx.Remove(dyUserFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDouyinDyUserUserIdPrefix = "cache:douyin:dyUser:userId:"
)

type (
	dyUserModel interface {
		Insert(ctx context.Context, data *DyUser) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*DyUser, error)
		Update(ctx context.Context, data *DyUser) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultDyUserModel struct {
		sqlc.CachedConn
		table string
	}

	DyUser struct {
		UserId        int64  `db:"user_id"`        // 用户ID
		Name          string `db:"name"`           // 用户名
		FollowerCount int64  `db:"follower_count"` // 粉丝总数
		IsFollow      int64  `db:"is_follow"`      // 是否已关注
		Password      string `db:"password"`       // 用户密码
		Salt          string `db:"salt"`           // uuid，密码MD5加密
		FollowCount   int64  `db:"follow_count"`   // 关注总数
	}
)

func newDyUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDyUserModel {
	return &defaultDyUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`dy_user`",
	}
}

func (m *defaultDyUserModel) Delete(ctx context.Context, userId int64) error {
	douyinDyUserUserIdKey := fmt.Sprintf("%s%v", cacheDouyinDyUserUserIdPrefix, userId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, userId)
	}, douyinDyUserUserIdKey)
	return err
}

func (m *defaultDyUserModel) FindOne(ctx context.Context, userId int64) (*DyUser, error) {
	douyinDyUserUserIdKey := fmt.Sprintf("%s%v", cacheDouyinDyUserUserIdPrefix, userId)
	var resp DyUser
	err := m.QueryRowCtx(ctx, &resp, douyinDyUserUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", dyUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, userId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDyUserModel) Insert(ctx context.Context, data *DyUser) (sql.Result, error) {
	douyinDyUserUserIdKey := fmt.Sprintf("%s%v", cacheDouyinDyUserUserIdPrefix, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, dyUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.FollowerCount, data.IsFollow, data.Password, data.Salt, data.FollowCount)
	}, douyinDyUserUserIdKey)
	return ret, err
}

func (m *defaultDyUserModel) Update(ctx context.Context, data *DyUser) error {
	douyinDyUserUserIdKey := fmt.Sprintf("%s%v", cacheDouyinDyUserUserIdPrefix, data.UserId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, dyUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.FollowerCount, data.IsFollow, data.Password, data.Salt, data.FollowCount, data.UserId)
	}, douyinDyUserUserIdKey)
	return err
}

func (m *defaultDyUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDouyinDyUserUserIdPrefix, primary)
}

func (m *defaultDyUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", dyUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDyUserModel) tableName() string {
	return m.table
}
