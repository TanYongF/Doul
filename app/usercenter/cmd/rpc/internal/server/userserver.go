// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package server

import (
	"context"

	"go_code/Doul/app/usercenter/cmd/rpc/internal/logic"
	"go_code/Doul/app/usercenter/cmd/rpc/internal/svc"
	"go_code/Doul/app/usercenter/cmd/rpc/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) GetUser(ctx context.Context, in *user.UserInfoReq) (*user.UserInfoReply, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

func (s *UserServer) Login(ctx context.Context, in *user.LoginReq) (*user.LoginReply, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) Register(ctx context.Context, in *user.RegisterReq) (*user.RegisterReply, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServer) CheckAuth(ctx context.Context, in *user.CheckAuthReq) (*user.CheckAuthReply, error) {
	l := logic.NewCheckAuthLogic(ctx, s.svcCtx)
	return l.CheckAuth(in)
}

func (s *UserServer) CheckIsFollow(ctx context.Context, in *user.CheckIsFollowReq) (*user.CheckIsFollowResp, error) {
	l := logic.NewCheckIsFollowLogic(ctx, s.svcCtx)
	return l.CheckIsFollow(in)
}

func (s *UserServer) GetFollowingCount(ctx context.Context, in *user.GetFollowingCountReq) (*user.GetFollowingCountResp, error) {
	l := logic.NewGetFollowingCountLogic(ctx, s.svcCtx)
	return l.GetFollowingCount(in)
}

func (s *UserServer) GetFollowerCount(ctx context.Context, in *user.GetFollowerCountReq) (*user.GetFollowerCountResp, error) {
	l := logic.NewGetFollowerCountLogic(ctx, s.svcCtx)
	return l.GetFollowerCount(in)
}
