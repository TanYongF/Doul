// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package userclient

import (
	"context"

	"go_code/Doul/app/usercenter/cmd/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckAuthReply        = user.CheckAuthReply
	CheckAuthReq          = user.CheckAuthReq
	CheckIsFollowReq      = user.CheckIsFollowReq
	CheckIsFollowResp     = user.CheckIsFollowResp
	GetFollowerCountReq   = user.GetFollowerCountReq
	GetFollowerCountResp  = user.GetFollowerCountResp
	GetFollowerListReq    = user.GetFollowerListReq
	GetFollowerListResp   = user.GetFollowerListResp
	GetFollowingCountReq  = user.GetFollowingCountReq
	GetFollowingCountResp = user.GetFollowingCountResp
	GetFollowingListReq   = user.GetFollowingListReq
	GetFollowingListResp  = user.GetFollowingListResp
	LoginReply            = user.LoginReply
	LoginReq              = user.LoginReq
	RegisterReply         = user.RegisterReply
	RegisterReq           = user.RegisterReq
	UserInfoReply         = user.UserInfoReply
	UserInfoReq           = user.UserInfoReq
	UserPO                = user.UserPO

	User interface {
		GetUser(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
		CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*CheckAuthReply, error)
		CheckIsFollow(ctx context.Context, in *CheckIsFollowReq, opts ...grpc.CallOption) (*CheckIsFollowResp, error)
		GetFollowingCount(ctx context.Context, in *GetFollowingCountReq, opts ...grpc.CallOption) (*GetFollowingCountResp, error)
		GetFollowerCount(ctx context.Context, in *GetFollowerCountReq, opts ...grpc.CallOption) (*GetFollowerCountResp, error)
		GetFollowerList(ctx context.Context, in *GetFollowerListReq, opts ...grpc.CallOption) (*GetFollowerListResp, error)
		GetFollowingList(ctx context.Context, in *GetFollowingListReq, opts ...grpc.CallOption) (*GetFollowingListResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUser(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*CheckAuthReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CheckAuth(ctx, in, opts...)
}

func (m *defaultUser) CheckIsFollow(ctx context.Context, in *CheckIsFollowReq, opts ...grpc.CallOption) (*CheckIsFollowResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CheckIsFollow(ctx, in, opts...)
}

func (m *defaultUser) GetFollowingCount(ctx context.Context, in *GetFollowingCountReq, opts ...grpc.CallOption) (*GetFollowingCountResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetFollowingCount(ctx, in, opts...)
}

func (m *defaultUser) GetFollowerCount(ctx context.Context, in *GetFollowerCountReq, opts ...grpc.CallOption) (*GetFollowerCountResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetFollowerCount(ctx, in, opts...)
}

func (m *defaultUser) GetFollowerList(ctx context.Context, in *GetFollowerListReq, opts ...grpc.CallOption) (*GetFollowerListResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetFollowerList(ctx, in, opts...)
}

func (m *defaultUser) GetFollowingList(ctx context.Context, in *GetFollowingListReq, opts ...grpc.CallOption) (*GetFollowingListResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetFollowingList(ctx, in, opts...)
}
