// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package userclient

import (
	"context"

	"go_code/Doul/app/usercenter/cmd/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckAuthReply = user.CheckAuthReply
	CheckAuthReq   = user.CheckAuthReq
	LoginReply     = user.LoginReply
	LoginReq       = user.LoginReq
	RegisterReply  = user.RegisterReply
	RegisterReq    = user.RegisterReq
	UserInfoReply  = user.UserInfoReply
	UserInfoReq    = user.UserInfoReq

	User interface {
		GetUser(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error)
		CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*CheckAuthReply, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUser(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*CheckAuthReply, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.CheckAuth(ctx, in, opts...)
}
