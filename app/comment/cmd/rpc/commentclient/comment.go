// Code generated by goctl. DO NOT EDIT.
// Source: comment.proto

package commentclient

import (
	"context"

	"go_code/Doul/app/comment/cmd/rpc/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentBody       = comment.CommentBody
	CommentListReq    = comment.CommentListReq
	CommentListResp   = comment.CommentListResp
	DeleteCommentReq  = comment.DeleteCommentReq
	DeleteCommentResp = comment.DeleteCommentResp
	PutCommentReq     = comment.PutCommentReq
	PutCommentResp    = comment.PutCommentResp
	User              = comment.User

	Comment interface {
		GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
		CreateComment(ctx context.Context, in *PutCommentReq, opts ...grpc.CallOption) (*PutCommentResp, error)
		DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

func (m *defaultComment) GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.GetCommentList(ctx, in, opts...)
}

func (m *defaultComment) CreateComment(ctx context.Context, in *PutCommentReq, opts ...grpc.CallOption) (*PutCommentResp, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.CreateComment(ctx, in, opts...)
}

func (m *defaultComment) DeleteComment(ctx context.Context, in *DeleteCommentReq, opts ...grpc.CallOption) (*DeleteCommentResp, error) {
	client := comment.NewCommentClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}
