// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dyCommentFieldNames          = builder.RawFieldNames(&DyComment{})
	dyCommentRows                = strings.Join(dyCommentFieldNames, ",")
	dyCommentRowsExpectAutoSet   = strings.Join(stringx.Remove(dyCommentFieldNames, "`comment_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dyCommentRowsWithPlaceHolder = strings.Join(stringx.Remove(dyCommentFieldNames, "`comment_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDouyinDyCommentCommentIdPrefix = "cache:douyin:dyComment:commentId:"
)

type (
	dyCommentModel interface {
		Insert(ctx context.Context, data *DyComment) (sql.Result, error)
		FindOne(ctx context.Context, commentId int64) (*DyComment, error)
		Update(ctx context.Context, data *DyComment) error
		Delete(ctx context.Context, commentId int64) error
	}

	defaultDyCommentModel struct {
		sqlc.CachedConn
		table string
	}

	DyComment struct {
		CommentId int64     `db:"comment_id"` // 评论ID
		UserId    int64     `db:"user_id"`    // 用户名
		Content   string    `db:"content"`    // 评论内容
		IsDel     int64     `db:"is_del"`     // 是否删除
		CreatedAt time.Time `db:"created_at"` // 创建时间
		VideoId   int64     `db:"video_id"`
	}
)

func newDyCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDyCommentModel {
	return &defaultDyCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`dy_comment`",
	}
}

func (m *defaultDyCommentModel) Delete(ctx context.Context, commentId int64) error {
	douyinDyCommentCommentIdKey := fmt.Sprintf("%s%v", cacheDouyinDyCommentCommentIdPrefix, commentId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `comment_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, commentId)
	}, douyinDyCommentCommentIdKey)
	return err
}

func (m *defaultDyCommentModel) FindOne(ctx context.Context, commentId int64) (*DyComment, error) {
	douyinDyCommentCommentIdKey := fmt.Sprintf("%s%v", cacheDouyinDyCommentCommentIdPrefix, commentId)
	var resp DyComment
	err := m.QueryRowCtx(ctx, &resp, douyinDyCommentCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", dyCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, commentId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDyCommentModel) Insert(ctx context.Context, data *DyComment) (sql.Result, error) {
	douyinDyCommentCommentIdKey := fmt.Sprintf("%s%v", cacheDouyinDyCommentCommentIdPrefix, data.CommentId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, dyCommentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Content, data.IsDel, data.VideoId)
	}, douyinDyCommentCommentIdKey)
	return ret, err
}

func (m *defaultDyCommentModel) Update(ctx context.Context, data *DyComment) error {
	douyinDyCommentCommentIdKey := fmt.Sprintf("%s%v", cacheDouyinDyCommentCommentIdPrefix, data.CommentId)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `comment_id` = ?", m.table, dyCommentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Content, data.IsDel, data.VideoId, data.CommentId)
	}, douyinDyCommentCommentIdKey)
	return err
}

func (m *defaultDyCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDouyinDyCommentCommentIdPrefix, primary)
}

func (m *defaultDyCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", dyCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDyCommentModel) tableName() string {
	return m.table
}
