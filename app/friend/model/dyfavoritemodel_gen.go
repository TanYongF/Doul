// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dyFavoriteFieldNames          = builder.RawFieldNames(&DyFavorite{})
	dyFavoriteRows                = strings.Join(dyFavoriteFieldNames, ",")
	dyFavoriteRowsExpectAutoSet   = strings.Join(stringx.Remove(dyFavoriteFieldNames, "`favorite_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	dyFavoriteRowsWithPlaceHolder = strings.Join(stringx.Remove(dyFavoriteFieldNames, "`favorite_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheDyFavoriteFavoriteIdPrefix    = "cache:dyFavorite:favoriteId:"
	cacheDyFavoriteUserIdVideoIdPrefix = "cache:dyFavorite:userId:videoId:"
)

type (
	dyFavoriteModel interface {
		Insert(ctx context.Context, data *DyFavorite) (sql.Result, error)
		FindOne(ctx context.Context, favoriteId int64) (*DyFavorite, error)
		FindOneByUserIdVideoId(ctx context.Context, userId sql.NullInt64, videoId int64) (*DyFavorite, error)
		Update(ctx context.Context, data *DyFavorite) error
		Delete(ctx context.Context, favoriteId int64) error
	}

	defaultDyFavoriteModel struct {
		sqlc.CachedConn
		table string
	}

	DyFavorite struct {
		FavoriteId int64         `db:"favorite_id"`
		UserId     sql.NullInt64 `db:"user_id"`  // 用户ID
		VideoId    int64         `db:"video_id"` // 视频ID
		IsDel      int64         `db:"is_del"`   // 是否删除
		CreatedAt  sql.NullTime  `db:"created_at"`
	}
)

func newDyFavoriteModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDyFavoriteModel {
	return &defaultDyFavoriteModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`dy_favorite`",
	}
}

func (m *defaultDyFavoriteModel) Delete(ctx context.Context, favoriteId int64) error {
	data, err := m.FindOne(ctx, favoriteId)
	if err != nil {
		return err
	}

	dyFavoriteFavoriteIdKey := fmt.Sprintf("%s%v", cacheDyFavoriteFavoriteIdPrefix, favoriteId)
	dyFavoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDyFavoriteUserIdVideoIdPrefix, data.UserId, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `favorite_id` = ?", m.table)
		return conn.ExecCtx(ctx, query, favoriteId)
	}, dyFavoriteFavoriteIdKey, dyFavoriteUserIdVideoIdKey)
	return err
}

func (m *defaultDyFavoriteModel) FindOne(ctx context.Context, favoriteId int64) (*DyFavorite, error) {
	dyFavoriteFavoriteIdKey := fmt.Sprintf("%s%v", cacheDyFavoriteFavoriteIdPrefix, favoriteId)
	var resp DyFavorite
	err := m.QueryRowCtx(ctx, &resp, dyFavoriteFavoriteIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `favorite_id` = ? limit 1", dyFavoriteRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, favoriteId)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDyFavoriteModel) FindOneByUserIdVideoId(ctx context.Context, userId sql.NullInt64, videoId int64) (*DyFavorite, error) {
	dyFavoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDyFavoriteUserIdVideoIdPrefix, userId, videoId)
	var resp DyFavorite
	err := m.QueryRowIndexCtx(ctx, &resp, dyFavoriteUserIdVideoIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `video_id` = ? limit 1", dyFavoriteRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, videoId); err != nil {
			return nil, err
		}
		return resp.FavoriteId, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDyFavoriteModel) Insert(ctx context.Context, data *DyFavorite) (sql.Result, error) {
	dyFavoriteFavoriteIdKey := fmt.Sprintf("%s%v", cacheDyFavoriteFavoriteIdPrefix, data.FavoriteId)
	dyFavoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDyFavoriteUserIdVideoIdPrefix, data.UserId, data.VideoId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, dyFavoriteRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.VideoId, data.IsDel)
	}, dyFavoriteFavoriteIdKey, dyFavoriteUserIdVideoIdKey)
	return ret, err
}

func (m *defaultDyFavoriteModel) Update(ctx context.Context, newData *DyFavorite) error {
	data, err := m.FindOne(ctx, newData.FavoriteId)
	if err != nil {
		return err
	}

	dyFavoriteFavoriteIdKey := fmt.Sprintf("%s%v", cacheDyFavoriteFavoriteIdPrefix, data.FavoriteId)
	dyFavoriteUserIdVideoIdKey := fmt.Sprintf("%s%v:%v", cacheDyFavoriteUserIdVideoIdPrefix, data.UserId, data.VideoId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `favorite_id` = ?", m.table, dyFavoriteRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.VideoId, newData.IsDel, newData.FavoriteId)
	}, dyFavoriteFavoriteIdKey, dyFavoriteUserIdVideoIdKey)
	return err
}

func (m *defaultDyFavoriteModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDyFavoriteFavoriteIdPrefix, primary)
}

func (m *defaultDyFavoriteModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `favorite_id` = ? limit 1", dyFavoriteRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDyFavoriteModel) tableName() string {
	return m.table
}
