// Code generated by goctl. DO NOT EDIT.
// Source: video-rpc.proto

package video

import (
	"context"

	"go_code/Doul/app/video/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FavoriteListReq  = pb.FavoriteListReq
	FavoriteListResp = pb.FavoriteListResp
	FeedReq          = pb.FeedReq
	FeedResp         = pb.FeedResp
	LikeReq          = pb.LikeReq
	LikeResp         = pb.LikeResp
	PublishListReq   = pb.PublishListReq
	PublishListResp  = pb.PublishListResp
	PublishReq       = pb.PublishReq
	PublishResp      = pb.PublishResp
	UserPO           = pb.UserPO
	VideoPO          = pb.VideoPO

	Video interface {
		Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
		PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
		FavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error)
		Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeResp, error)
		PublishAction(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error)
	}

	defaultVideo struct {
		cli zrpc.Client
	}
)

func NewVideo(cli zrpc.Client) Video {
	return &defaultVideo{
		cli: cli,
	}
}

func (m *defaultVideo) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}

func (m *defaultVideo) PublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.PublishList(ctx, in, opts...)
}

func (m *defaultVideo) FavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.FavoriteList(ctx, in, opts...)
}

func (m *defaultVideo) Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.Like(ctx, in, opts...)
}

func (m *defaultVideo) PublishAction(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishResp, error) {
	client := pb.NewVideoClient(m.cli.Conn())
	return client.PublishAction(ctx, in, opts...)
}
